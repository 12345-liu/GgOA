<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.gg.ssm.mapper.DeptMapper">
	<!-- sql片段 -->
	<sql id="all_dept_column">
		ID,PARENT_ID,NAME,SORT,CODE,
   		 ADDRESS,MASTER,PHONE,FAX,EMAIL,
   		 UPDATE_BY,UPDATE_DATE,REMARKS
	</sql>
	<!-- 查询所有 -->
	<select id="getAllDeptList" resultType="dept">
		select 
		<include refid="all_dept_column"></include>
		from pm_sys_dept
	</select>
	<!-- 根据id查询部门明细 -->
	<select id="getDeptListById" parameterType="java.lang.Long" resultType="dept">
		<!-- 业务需求需要在查询明细信息的时候得到父亲节点的名字 -->
		SELECT  C.ID,C.PARENT_ID,D.NAME AS PARENT_NAME,C.NAME,
 		C.SORT,C.CODE,C.ADDRESS,C.MASTER,C.PHONE,C.FAX,C.EMAIL,
 		C.UPDATE_BY,C.UPDATE_DATE,C.REMARKS
		FROM PM_SYS_DEPT C LEFT JOIN PM_SYS_DEPT D 
		ON C.PARENT_ID=D.ID WHERE C.ID = #{ID}
	</select>
	<!-- 查看有无子节点 -->
	<select id="getChildCount" parameterType="java.lang.Long" resultType="java.lang.Integer">
		select count(*) from pm_sys_dept where parent_id = #{parentId}
	</select>
	<!-- 增加 -->
	<insert id="addDept" parameterType = "dept">	
		<!--类似于与oracle数据库,需要调用序列  -->
		<!-- <selectKey keyProperty="userId" resultType="long" order = "BEFORE">
			SELECT IDSEQUNCE.NEXTVAL FROM DUAL AS userId
		</selectKey> 
			INSERT INTO PM_SYS_USER(USER_ID,USER_NAME,LOGIN_NAME,BIRTHDAY,TV_UPDATE)
			VALUES(#{userId},#{userName},#{loginName},#{birthday},#{tvUpdate})
		
		-->		
		<!--在类似于mysql的数据库,有自增长id的设置时,在插入成功后,返回主键,放入对象中  -->
		<selectKey keyProperty="id" resultType="long" order="AFTER" >
               SELECT LAST_INSERT_ID() as id
        </selectKey>
        	  
		INSERT INTO PM_SYS_DEPT(PARENT_ID,NAME,SORT,CODE,
					 ADDRESS,MASTER,PHONE,FAX,EMAIL,
					UPDATE_BY, UPDATE_DATE,REMARKS)
		VALUES(#{parentId},#{name},#{sort},#{code},
				#{address},#{master},#{phone},#{fax},#{email},
				#{updateBy},#{updateDate},#{remarks})
	</insert>
	
	<!-- 根据部门id删除部门与角色的对应关系 -->
	<delete id="DeptToRoleDelete" parameterType="java.lang.Long">
		delete from pm_sys_role_dept where dept_id = #{id}
	</delete>
	<!-- 删除本身 -->
	<delete id="DeptDelete" parameterType="java.lang.Long">
		delete from pm_sys_dept where id = #{id}
	</delete>
	<!--修改-->
	<update id="updateDept" parameterType = "dept">
		UPDATE PM_SYS_DEPT  
		<set> 				
			<if test="parentId != null">
	            PARENT_ID = #{parentId},
	        </if>
	        <if test="name != null">
	            NAME = #{name},
	        </if>	   
	        <if test="sort != null">
	            SORT = #{sort},
	        </if>
	        <if test="code != null">
	            CODE = #{code},
	        </if>	         
 	        <if test="master != null">
	            ADDRESS = #{master},
	        </if>
	        <if test="master != null">
	            MASTER = #{master},
	        </if>	   
	        <if test="phone != null">
	            PHONE = #{phone},
	        </if>
	        <if test="fax != null">
	            FAX = #{fax},
	        </if>
	        
	        <if test="email != null">
	            EMAIL = #{email},
	        </if>	        
	        <if test="updateBy != null">
	            UPDATE_BY = #{updateBy},
	        </if>
	        <if test="updateDate != null">
	            UPDATE_DATE = #{updateDate},
	        </if>
	        <if test="remarks != null">
	            REMARKS = #{remarks},
	        </if>		 
		</set>
		WHERE ID = #{id}
	</update>
</mapper>